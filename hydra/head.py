# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'head.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'head.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
import os
from Graph import Ui_Dialog

filtr = ''
streamcopy = []
TCP = 0
TCPset = [0]
UDP = 0
UDPset = [0]

class Model(QtCore.QAbstractListModel):
    def __init__(self, stream=None):
        super().__init__()
        self.stream = stream or []

    def data(self, index, role):
        if role == Qt.ItemDataRole.DisplayRole:
            ipv4 = self.stream[index.row()]
            ipv4 = ipv4.split()
            if filtr == 'TCP' and ipv4[2] == '6':
                text = 'Nr: {}, Time: Source: {}, Destination: {}, Protocol: TCP' \
                    .format(index.row(), ipv4[0], ipv4[1], ipv4[2])
            elif filtr == 'UDP' and ipv4[2] == '17':
                text = 'Nr: {}, Time: Source: {}, Destination: {}, Protocol: UDP' \
                    .format(index.row(), ipv4[0], ipv4[1], ipv4[2])
            elif filtr == 'ICMP' and ipv4[2] == '1':
                text = 'Nr: {}, Time: Source: {}, Destination: {}, Protocol: ICMP' \
                    .format(index.row(), ipv4[0], ipv4[1], ipv4[2])
            elif filtr == '':
                text = 'Nr: {}, Time: Source: {}, Destination: {}, Protocol: {}' \
                    .format(index.row(), ipv4[0], ipv4[1], ipv4[2])
            else:
                text = None
            return text

    def rowCount(self, index):
        return len(self.stream)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow, username, ipaddr, filname, limba):
        self.rand = 0
        self.Username = username
        self.IPaddr = ipaddr
        self.filename = filname
        self.timpset = []
        self.language = limba
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(706, 464)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(10, 10, 681, 192))
        self.listView.setObjectName("listView")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(10, 210, 351, 192))
        self.textBrowser.setObjectName("textBrowser")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(380, 240, 261, 25))
        self.comboBox.setObjectName("comboBox")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(380, 210, 67, 17))
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 706, 22))
        self.menubar.setObjectName("menubar")
        self.menuGraph = QtWidgets.QMenu(self.menubar)
        self.menuGraph.setObjectName("menuGraph")
        self.menuSave = QtWidgets.QMenu(self.menubar)
        self.menuSave.setObjectName("menuSave")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(380, 280, 89, 25))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.continousupdate)
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionTCP_Graph = QtWidgets.QAction(MainWindow)
        self.actionTCP_Graph.setObjectName("actionTCP_Graph")
        self.actionSave_totext_file = QtWidgets.QAction(MainWindow)
        self.actionSave_totext_file.setObjectName("actionSave_totext_file")
        self.actionLanguage = QtWidgets.QAction(MainWindow)
        self.actionLanguage.setObjectName("actionLanguage")
        self.menuGraph.addAction(self.actionTCP_Graph)
        self.menuSave.addAction(self.actionSave_totext_file)
        self.menuSettings.addAction(self.actionLanguage)
        self.menubar.addAction(self.menuGraph.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuSave.menuAction())


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.model = Model()
        self.listView.setModel(self.model)
        self.comboBox.addItems(['', 'TCP', 'UDP', 'ICMP'])
        self.comboBox.currentTextChanged.connect(self.categorie)
        self.listView.clicked.connect(self.afis)
        self.continousupdate()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        if self.language == 'EN':
            MainWindow.setWindowTitle(_translate("MainWindow", "Head"))
            self.label.setText(_translate("MainWindow", "Filter"))
            self.menuGraph.setTitle(_translate("MainWindow", "Graph"))
            self.menuSave.setTitle(_translate("MainWindow", "Help"))
            self.pushButton.setText(_translate("MainWindow", "Refresh"))
            self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
            self.actionTCP_Graph.setText(_translate("MainWindow", "TCP Graph"))
            self.actionSave_totext_file.setText(_translate("MainWindow", "About"))
            self.actionLanguage.setText(_translate("MainWindow", "Language"))
        elif self.language == 'RO':
            MainWindow.setWindowTitle(_translate("MainWindow", "Cap"))
            self.label.setText(_translate("MainWindow", "Filtru"))
            self.menuGraph.setTitle(_translate("MainWindow", "Grafic"))
            self.menuSave.setTitle(_translate("MainWindow", "Ajutor"))
            self.pushButton.setText(_translate("MainWindow", "Reîncărcare"))
            self.menuSettings.setTitle(_translate("MainWindow", "Setări"))
            self.actionTCP_Graph.setText(_translate("MainWindow", "Grafic TCP"))
            self.actionSave_totext_file.setText(_translate("MainWindow", "Despre"))
            self.actionLanguage.setText(_translate("MainWindow", "Limbaj"))

    def continousupdate(self):
        j = 0
        comand = 'scp {}@{}:{}.txt .'.format(self.Username, self.IPaddr, self.filename)
        os.system(comand)
        with open('{}.txt'.format(self.filename)) as f:
            continut = f.readlines()
            for i in continut:
                if j >= self.rand:
                    self.rand = self.rand + 1
                    self.model.stream.append(i)
                    self.model.layoutChanged.emit()
                j = j+1

    def categorie(self, s):
        stream2 = []
        global filtr
        global streamcopy
        if filtr == '':
            streamcopy = self.model.stream
        filtr = s
        for i in range(len(self.model.stream)):
            ipv4 = self.model.stream[i]
            ipv4 = ipv4.split()
            if filtr == 'TCP' and ipv4[2] == '6':
                stream2.append(self.model.stream[i])
            elif filtr == 'UDP' and ipv4[2] == '17':
                stream2.append(self.model.stream[i])
            elif filtr == 'ICMP' and ipv4[2] == '1':
                stream2.append(self.model.stream[i])
        if filtr == '':
            self.model.stream = streamcopy
        else:
            self.model.stream = stream2
        self.model.layoutChanged.emit()

    def openTCPgraph(self):
        global TCPset
        window = QtWidgets.QDialog()
        graph = Ui_Dialog()
        graph.setupUi(window, self.timpset, TCPset, self.language)
        window.exec_()

    def openUDPgraph(self):
        global UDPset
        window = QtWidgets.QDialog()
        graph = Ui_Dialog()
        graph.setupUi(window, self.timpset, UDPset, self.language)
        window.exec_()

    def afis(self):
        self.textBrowser.setText('')
        ipv4 = self.model.stream[self.listView.selectedIndexes()[0].row()]
        ipv4 = ipv4.split()
        if ipv4[2] == '6':
            self.textBrowser.setText('Ethernet: destination MAC: {}, source MAC: {} \nTCP: Source Port: {}, '
                                     'Destination Port: {}, Sequence: {}, Acknowledgment: '
                                          '{}'.format(ipv4[7],ipv4[8],ipv4[3], ipv4[4],ipv4[5],ipv4[6]))
        elif ipv4[2] == '17':
            self.textBrowser.setText('Ethernet: destination MAC: {}, source MAC: {} \nUDP: Source Port: {}, '
                                          'Destination Port: {}, Length: {} '
                                          .format(ipv4[7],ipv4[8],ipv4[3], ipv4[4],ipv4[5],ipv4[6]))
        elif ipv4[2] == '1':
            self.textBrowser.setText('Ethernet: destination MAC: {}, source MAC: {} \nICMP: Type: {},  Code: {}, '
                                     'Checksum: {}'.format(ipv4[7],ipv4[8],ipv4[3], ipv4[4],ipv4[5],ipv4[6]))
