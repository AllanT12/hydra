# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sniffer.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import socket
import struct
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QThreadPool

from Graph import Ui_Dialog
from AddPI import Ui_Dialog as Ui_PI
from save import Ui_Dialog as Save
from soc import Sock
from about import Ui_Dialog as About

filtr = ''
streamcopy = []
TCP = 0
TCPset = [0]
UDP = 0
UDPset = [0]


class Model(QtCore.QAbstractListModel):
    def __init__(self, stream=None):
        super().__init__()
        self.stream = stream or []

    def data(self, index, role):
        if role == Qt.ItemDataRole.DisplayRole:
            eth, ipv4 = self.stream[index.row()]
            if filtr == 'TCP' and ipv4[3] == 6:
                text = 'Nr: {}, Source: {}, Destination: {}, Protocol: TCP' \
                    .format(index.row(), ipv4[4], ipv4[5], ipv4[3])
            elif filtr == 'UDP' and ipv4[3] == 17:
                text = 'Nr: {}, Source: {}, Destination: {}, Protocol: UDP' \
                    .format(index.row(), ipv4[4], ipv4[5], ipv4[3])
            elif filtr == 'ICMP' and ipv4[3] == 1:
                text = 'Nr: {}, Source: {}, Destination: {}, Protocol: ICMP' \
                    .format(index.row(), ipv4[4], ipv4[5], ipv4[3])
            elif filtr == '':
                text = 'Nr: {}, Source: {}, Destination: {}, Protocol: {}' \
                    .format(index.row(), ipv4[4], ipv4[5], ipv4[3])
            else:
                text = None
            return text

    def rowCount(self, index):
        return len(self.stream)


class Ui_mainWindow(object):
    timp = 0
    timpset = [0]
    language = 'EN'
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(660, 560)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(10, 50, 631, 231))
        self.listView.setObjectName("listView")
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(30, 10, 112, 23))
        self.radioButton.setObjectName("radioButton")
        self.buttonGroup = QtWidgets.QButtonGroup(mainWindow)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.radioButton)
        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(120, 10, 112, 23))
        self.radioButton_2.setObjectName("radioButton_2")
        self.buttonGroup.addButton(self.radioButton_2)
        self.rawData = QtWidgets.QTextBrowser(self.centralwidget)
        self.rawData.setGeometry(QtCore.QRect(330, 290, 311, 211))
        self.rawData.setObjectName("rawData")
        self.DescriereaPachet = QtWidgets.QTextBrowser(self.centralwidget)
        self.DescriereaPachet.setGeometry(QtCore.QRect(10, 290, 311, 211))
        self.DescriereaPachet.setObjectName("DescriereaPachet")
        self.filtru = QtWidgets.QComboBox(self.centralwidget)
        self.filtru.setGeometry(QtCore.QRect(460, 10, 181, 25))
        self.filtru.setObjectName("filtru")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(250, 10, 89, 25))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.addpi)
        mainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 660, 22))
        self.menubar.setObjectName("menubar")
        self.menuGraph = QtWidgets.QMenu(self.menubar)
        self.menuGraph.setObjectName("menuGraph")
        self.menuSave = QtWidgets.QMenu(self.menubar)
        self.menuSave.setObjectName("menuSave")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)
        self.actionCreate_Graph = QtWidgets.QAction(mainWindow)
        self.actionCreate_Graph.setObjectName("actionCreate_Graph")
        self.actionCreate_Graph.triggered.connect(self.openTCPgraph)
        self.menuGraph.addAction(self.actionCreate_Graph)
        self.actionCreateUDP_Graph = QtWidgets.QAction(mainWindow)
        self.actionCreateUDP_Graph.setObjectName("actionCreateUDP_Graph")
        self.actionCreateUDP_Graph.triggered.connect(self.openUDPgraph)
        self.menuGraph.addAction(self.actionCreateUDP_Graph)
        self.menubar.addAction(self.menuGraph.menuAction())
        self.actionSave_totext_file = QtWidgets.QAction(mainWindow)
        self.actionSave_totext_file.setObjectName("actionSave_totext_file")
        self.actionLanguage = QtWidgets.QAction(mainWindow)
        self.actionLanguage.setObjectName("actionLanguage")
        self.actionAbout = QtWidgets.QAction(mainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionSave_totext_file.triggered.connect(self.save)
        self.actionAbout.triggered.connect(self.about)
        self.menuSettings.addAction(self.actionLanguage)
        self.actionLanguage.triggered.connect(self.change_language)
        self.menuHelp.addAction(self.actionAbout)
        self.menuSave.addAction(self.actionSave_totext_file)
        self.menubar.addAction(self.menuSave.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(400, 10, 41, 17))
        self.label.setObjectName("label")

        self.threaduri = QThreadPool()
        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)
        self.filtru.addItems(['', 'TCP', 'UDP', 'ICMP'])
        self.filtru.currentTextChanged.connect(self.categorie)
        self.model = Model()
        self.listView.setModel(self.model)
        self.listView.clicked.connect(self.afis)
        self.my_timer = QtCore.QTimer()
        self.my_timer.timeout.connect(self.continousupdate)
        self.my_timer.start(0)
        self.mainwindow = mainWindow

    def retranslateUi(self, mainWindow):
        if self.language == 'EN':
            _translate = QtCore.QCoreApplication.translate
            mainWindow.setWindowTitle(_translate("mainWindow", "Hydra"))
            self.radioButton.setText(_translate("mainWindow", "Stop"))
            self.radioButton_2.setText(_translate("mainWindow", "Start"))
            self.label.setText(_translate("mainWindow", "Filter:"))
            self.menuGraph.setTitle(_translate("mainWindow", "Graph"))
            self.menuSave.setTitle(_translate("MainWindow", "Save"))
            self.menuHelp.setTitle(_translate("MainWindow", "Help"))
            self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
            self.pushButton.setText(_translate("mainWindow", "Add PI"))
            self.actionCreate_Graph.setText(_translate("mainWindow", "Create a TCP Graph"))
            self.actionCreateUDP_Graph.setText(_translate("mainWindow", "Create a UDP Graph"))
            self.actionSave_totext_file.setText(_translate("MainWindow", "Save to text file"))
            self.actionAbout.setText(_translate("MainWindow", "About"))
            self.actionLanguage.setText(_translate("MainWindow", "Change language to RO"))
        elif self.language == 'RO':
            _translate = QtCore.QCoreApplication.translate
            mainWindow.setWindowTitle(_translate("mainWindow", "Hydra"))
            self.radioButton.setText(_translate("mainWindow", "Stop"))
            self.radioButton_2.setText(_translate("mainWindow", "Start"))
            self.label.setText(_translate("mainWindow", "Filtru:"))
            self.menuGraph.setTitle(_translate("mainWindow", "Grafic"))
            self.menuSave.setTitle(_translate("MainWindow", "Salvare"))
            self.menuHelp.setTitle(_translate("MainWindow", "Ajutor"))
            self.menuSettings.setTitle(_translate("MainWindow", "Setări"))
            self.pushButton.setText(_translate("mainWindow", "Adaugă PI"))
            self.actionCreate_Graph.setText(_translate("mainWindow", "Generează grafic cu pachet TCP"))
            self.actionCreateUDP_Graph.setText(_translate("mainWindow", "Generează grafic cu pachet UDP"))
            self.actionSave_totext_file.setText(_translate("MainWindow", "Salvează pe fișier text"))
            self.actionAbout.setText(_translate("MainWindow", "Despre"))
            self.actionLanguage.setText(_translate("MainWindow", "Schimbă în limba ENG"))

    def change_language(self):
        if self.language == 'EN':
            self.language = 'RO'
            self.retranslateUi(self.mainwindow)
        else:
            self.language = 'EN'
            self.retranslateUi(self.mainwindow)

    def about(self):
        window = QtWidgets.QDialog()
        graph = About()
        graph.setupUi(window, self.language)
        window.exec_()

    def save(self):
        window = QtWidgets.QDialog()
        graph = Save()
        graph.setupUi(window, self.model.stream, self.language)
        window.exec_()

    def addpi(self):
        window = QtWidgets.QDialog()
        graph = Ui_PI()
        graph.setupUi(window, self.language)
        window.exec_()

    def openTCPgraph(self):
        global TCPset
        window = QtWidgets.QDialog()
        graph = Ui_Dialog()
        graph.setupUi(window, self.timpset, TCPset, self.language)
        window.exec_()

    def openUDPgraph(self):
        global UDPset
        window = QtWidgets.QDialog()
        graph = Ui_Dialog()
        graph.setupUi(window, self.timpset, UDPset, self.language)
        window.exec_()

    def categorie(self, s):
        stream2 = []
        global filtr
        global streamcopy
        self.radioButton.setChecked(True)
        if filtr == '':
            streamcopy = self.model.stream
        filtr = s
        for i in range(len(self.model.stream)):
            eth, ipv4 = self.model.stream[i]
            if filtr == 'TCP' and ipv4[3] == 6:
                stream2.append(self.model.stream[i])
            elif filtr == 'UDP' and ipv4[3] == 17:
                stream2.append(self.model.stream[i])
            elif filtr == 'ICMP' and ipv4[3] == 1:
                stream2.append(self.model.stream[i])
        if filtr == '':
            self.model.stream = streamcopy
        else:
            self.model.stream = stream2
        self.model.layoutChanged.emit()

    def continousupdate(self):
        global TCP
        global UDP
        if self.radioButton_2.isChecked():
            self.timp += 1
            self.timpset.append(self.timp)
            sockt = Sock()
            self.threaduri.start(sockt)
            self.threaduri.waitForDone()
            raw_data = sockt.raw_data
            if raw_data != None:
                eth = self.ethernet_head(raw_data)
                if eth[2] == 8:
                    self.rawData.append(raw_data.__str__())
                    ipv4 = self.ipv4_head(eth[3])
                    self.model.stream.append((eth, ipv4))
                    self.model.layoutChanged.emit()  # emita un semnal catre model ca s-a actualizat baza de date
                    if ipv4[3] == 17:
                        UDP += 1
                    elif ipv4[3] == 6:
                        TCP += 1
            TCPset.append(TCP)
            UDPset.append(UDP)

    def afis(self):
        self.DescriereaPachet.setText('')
        eth, ipv4 = self.model.stream[self.listView.selectedIndexes()[0].row()]
        if ipv4[3] == 6:
            tcp = self.tcp_head(ipv4[6])
            self.DescriereaPachet.setText('Ethernet: destination MAC: {}, source MAC: {} \nTCP: Source Port: {},  '
                                          'Destination Port: {}, Sequence: {}, Acknowledgment: '
                                          '{} \nFlags:\nURG: {} ACK: {} PSH: {}\nRST: {} SYN: {} FIN: '
                                          '{}'.format(eth[0], eth[1], tcp[0], tcp[1], tcp[2], tcp[3], tcp[4], tcp[5],
                                                      tcp[6], tcp[7], tcp[8], tcp[9]))
        elif ipv4[3] == 17:
            udp = self.udp_head(ipv4[6])
            self.DescriereaPachet.setText('Ethernet: destination MAC: {}, source MAC: {} \nUDP: Source Port: {},  '
                                          'Destination Port: {}, Length: {} '
                                          .format(eth[0], eth[1], udp[0], udp[1], udp[2]))
        elif ipv4[3] == 1:
            icmp = self.icmp_head(ipv4[6])
            self.DescriereaPachet.setText('Ethernet: destination MAC: {}, source MAC: {} \nICMP: Type: {},  Code: {}, '
                                          'Checksum: {}'.format(eth[0], eth[1], icmp[0], icmp[1], icmp[2]))

    def ethernet_head(self, raw_data):
        dest, src, prototype = struct.unpack('! 6s 6s H', raw_data[:14])
        dest_mac = self.get_mac_addr(dest)
        src_mac = self.get_mac_addr(src)
        proto = socket.htons(prototype)
        data = raw_data[14:]
        return dest_mac, src_mac, proto, data

    def ipv4_head(self, raw_data):
        version_header_length = raw_data[0]
        version = version_header_length >> 4
        header_length = (version_header_length & 15) * 4
        ttl, proto, src, target = struct.unpack('! 8x B B 2x 4s 4s', raw_data[:20])
        data = raw_data[header_length:]
        src = self.get_ip(src)
        target = self.get_ip(target)
        return version, header_length, ttl, proto, src, target, data

    def get_ip(self, addr):
        return '.'.join(map(str, addr))

    def get_mac_addr(self, addr):
        return ':'.join(map(str, addr))

    def tcp_head(self, raw_data):
        (src_port, dest_port, sequence, acknowledgment, offset_reserved_flags) = struct.unpack('! H H L L H',
                                                                                               raw_data[:14])
        offset = (offset_reserved_flags >> 12) * 4
        flag_urg = (offset_reserved_flags & 32) >> 5
        flag_ack = (offset_reserved_flags & 16) >> 4
        flag_psh = (offset_reserved_flags & 8) >> 3
        flag_rst = (offset_reserved_flags & 4) >> 2
        flag_syn = (offset_reserved_flags & 2) >> 1
        flag_fin = offset_reserved_flags & 1
        data = raw_data[offset:]
        return src_port, dest_port, sequence, acknowledgment, flag_urg, flag_ack, \
               flag_psh, flag_rst, flag_syn, flag_fin, data

    def udp_head(self, raw_data):
        (src_port, dest_port, length, checksum) = struct.unpack('! H H H H', raw_data[:8])
        return src_port, dest_port, length, checksum

    def icmp_head(self, raw_data):
        (Type, code, checksum, data) = struct.unpack('! B B H L', raw_data[:8])
        return Type, code, checksum, data
